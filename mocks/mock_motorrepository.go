// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/n7down/Forge/models (interfaces: MotorRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/n7down/Forge/models"
	reflect "reflect"
)

// MockMotorRepository is a mock of MotorRepository interface
type MockMotorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMotorRepositoryMockRecorder
}

// MockMotorRepositoryMockRecorder is the mock recorder for MockMotorRepository
type MockMotorRepositoryMockRecorder struct {
	mock *MockMotorRepository
}

// NewMockMotorRepository creates a new mock instance
func NewMockMotorRepository(ctrl *gomock.Controller) *MockMotorRepository {
	mock := &MockMotorRepository{ctrl: ctrl}
	mock.recorder = &MockMotorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMotorRepository) EXPECT() *MockMotorRepositoryMockRecorder {
	return m.recorder
}

// AddMotor mocks base method
func (m *MockMotorRepository) AddMotor(arg0 models.MotorRequest) error {
	ret := m.ctrl.Call(m, "AddMotor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMotor indicates an expected call of AddMotor
func (mr *MockMotorRepositoryMockRecorder) AddMotor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMotor", reflect.TypeOf((*MockMotorRepository)(nil).AddMotor), arg0)
}

// GetAllMotors mocks base method
func (m *MockMotorRepository) GetAllMotors() ([]*models.MotorResponse, error) {
	ret := m.ctrl.Call(m, "GetAllMotors")
	ret0, _ := ret[0].([]*models.MotorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMotors indicates an expected call of GetAllMotors
func (mr *MockMotorRepositoryMockRecorder) GetAllMotors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMotors", reflect.TypeOf((*MockMotorRepository)(nil).GetAllMotors))
}
