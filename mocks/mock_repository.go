// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/n7down/Forge/models (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/n7down/Forge/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddBattery mocks base method
func (m *MockRepository) AddBattery(arg0 models.BatteryRequest) error {
	ret := m.ctrl.Call(m, "AddBattery", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBattery indicates an expected call of AddBattery
func (mr *MockRepositoryMockRecorder) AddBattery(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBattery", reflect.TypeOf((*MockRepository)(nil).AddBattery), arg0)
}

// AddMotor mocks base method
func (m *MockRepository) AddMotor(arg0 models.MotorRequest) error {
	ret := m.ctrl.Call(m, "AddMotor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMotor indicates an expected call of AddMotor
func (mr *MockRepositoryMockRecorder) AddMotor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMotor", reflect.TypeOf((*MockRepository)(nil).AddMotor), arg0)
}

// GetAllBatteries mocks base method
func (m *MockRepository) GetAllBatteries() ([]*models.BatteryResponse, error) {
	ret := m.ctrl.Call(m, "GetAllBatteries")
	ret0, _ := ret[0].([]*models.BatteryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBatteries indicates an expected call of GetAllBatteries
func (mr *MockRepositoryMockRecorder) GetAllBatteries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBatteries", reflect.TypeOf((*MockRepository)(nil).GetAllBatteries))
}

// GetAllMotors mocks base method
func (m *MockRepository) GetAllMotors() ([]*models.MotorResponse, error) {
	ret := m.ctrl.Call(m, "GetAllMotors")
	ret0, _ := ret[0].([]*models.MotorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMotors indicates an expected call of GetAllMotors
func (mr *MockRepositoryMockRecorder) GetAllMotors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMotors", reflect.TypeOf((*MockRepository)(nil).GetAllMotors))
}
